#!/usr/bin/env python3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# --- Constants ---
KI_REST = 4.14159
KI_MOTION = 4.18879
TOLERANCE = 0.1

# --- Plotting Configuration ---
sns.set_theme(style="whitegrid", context="talk")
plt.rcParams['figure.figsize'] = (16, 9)
plt.rcParams['figure.dpi'] = 150

def visualize_results(csv_filepath):
    """
    Loads the final report CSV and generates visualizations.
    
    Args:
        csv_filepath (str): The path to the protein_ki_final_report.csv file.
    """
    print(f"Loading data from '{csv_filepath}'...")
    try:
        df = pd.read_csv(csv_filepath)
        print(f"Successfully loaded {len(df):,} protein records.")
    except FileNotFoundError:
        print(f"ERROR: The file '{csv_filepath}' was not found.")
        print("Please make sure the script is in the same directory as your data file.")
        return

    # --- 1. Create the Scatter Plot (Fractal Dimension vs. Length) ---
    print("Generating Scatter Plot...")
    
    # Filter for Ki matches
    rest_matches = df[np.abs(df['D_z_score'] - KI_REST) < TOLERANCE]
    motion_matches = df[np.abs(df['D_z_score'] - KI_MOTION) < TOLERANCE]
    
    plt.figure() # Create a new figure for the scatter plot
    
    # Plot all other proteins first as a background
    sns.scatterplot(
        data=df,
        x='length',
        y='fractal_dimension',
        color='#94a3b8', # slate-400
        alpha=0.3,
        label='Other Proteins',
        s=20 # smaller size for background points
    )
    
    # Plot Ki Rest matches on top
    sns.scatterplot(
        data=rest_matches,
        x='length',
        y='fractal_dimension',
        color='#2563eb', # blue-600
        marker='D', # Diamond
        s=60,
        label=f'Ki Rest Matches ({len(rest_matches)})'
    )
    
    # Plot Ki Motion matches on top
    sns.scatterplot(
        data=motion_matches,
        x='length',
        y='fractal_dimension',
        color='#ea580c', # orange-600
        marker='*', # Star
        s=80,
        label=f'Ki Motion Matches ({len(motion_matches)})'
    )
    
    plt.xscale('log')
    plt.title('Fractal Dimension vs. Protein Length', fontsize=20, weight='bold')
    plt.xlabel('Protein Length (log scale)', fontsize=14)
    plt.ylabel('Fractal Dimension (D)', fontsize=14)
    plt.legend()
    plt.grid(True, which="both", ls="--", c='0.7')
    
    scatter_filename = 'plot_fractal_dimension_vs_length.png'
    plt.savefig(scatter_filename, bbox_inches='tight')
    print(f"✅ Scatter plot saved to '{scatter_filename}'")
    plt.close() # Close the figure to free memory

    # --- 2. Create the Histogram (Distribution of Z-Scores) ---
    print("Generating Z-Score Distribution Histogram...")
    
    plt.figure() # Create a new figure for the histogram
    
    sns.histplot(df['D_z_score'], kde=True, bins=100, color='#64748b')
    
    plt.axvline(KI_REST, color='#2563eb', linestyle='--', linewidth=2, label=f'Ki Rest ({KI_REST:.2f})')
    plt.axvline(KI_MOTION, color='#ea580c', linestyle='--', linewidth=2, label=f'Ki Motion ({KI_MOTION:.2f})')
    
    plt.title('Distribution of Fractal Dimension Z-Scores', fontsize=20, weight='bold')
    plt.xlabel('D_z_score', fontsize=14)
    plt.ylabel('Count', fontsize=14)
    plt.legend()
    
    histogram_filename = 'plot_z_score_distribution.png'
    plt.savefig(histogram_filename, bbox_inches='tight')
    print(f"✅ Histogram saved to '{histogram_filename}'")
    plt.close() # Close the figure


if __name__ == '__main__':
    # The name of the CSV file generated by the previous script
    FINAL_REPORT_FILE = "protein_ki_final_report.csv"
    visualize_results(FINAL_REPORT_FILE)
