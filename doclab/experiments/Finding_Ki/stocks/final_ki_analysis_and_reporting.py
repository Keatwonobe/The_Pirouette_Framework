#!/usr/bin/env python3
import pandas as pd
import numpy as np
import warnings

# --- Constants ---
KI_REST = 4.14159
KI_MOTION = 4.18879
# Tolerance for matching Ki. A z-score must be within this distance.
TOLERANCE = 0.05 
# Minimum number of matches required to display a category in the summary.
MIN_MATCHES_TO_REPORT = 3

def find_ki_in_results(results_csv_path, final_report_path):
    """
    Loads the comprehensive analysis results, calculates z-scores for all metrics,
    and identifies which metrics and tickers resonate with the Ki constants.
    """
    print(f"Loading detailed results from '{results_csv_path}'...")
    try:
        # Suppress DtypeWarning for mixed types, as we will only work with numeric columns
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", pd.errors.DtypeWarning)
            df = pd.read_csv(results_csv_path)
        print(f"Successfully loaded {len(df):,} records.")
    except FileNotFoundError:
        print(f"ERROR: The results file was not found at '{results_csv_path}'.")
        print("Please ensure the 'stock_analysis_results.csv' file is in the same directory.")
        return

    # --- Step 1: Identify all numeric metric columns to analyze ---
    # We exclude identifiers and columns that are already scores or identifiers
    exclude_cols = ['ticker', 'type', 'data_points']
    metric_cols = [col for col in df.columns if col not in exclude_cols and '_ki_resonance_score' not in col]
    
    print(f"\nCalculating Z-Scores for {len(metric_cols)} metrics...")

    # --- Step 2: Calculate Z-score for each metric ---
    for col in metric_cols:
        # Ensure column is numeric, coercing errors to NaN
        df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # Drop NaN values for calculation to avoid errors
        valid_data = df[col].dropna()
        
        if len(valid_data) > 1:
            mean = valid_data.mean()
            std = valid_data.std()
            
            # Avoid division by zero for columns with no variance
            if std > 0:
                z_score_col_name = f"zscore_{col}"
                df[z_score_col_name] = (df[col] - mean) / std

    print("Z-Score calculation complete.")

    # --- Step 3: Hunt for Ki Resonances in all Z-Score columns ---
    print(f"\nSearching for Ki resonances with a tolerance of {TOLERANCE}...")
    
    ki_hits = {
        'rest': {},
        'motion': {}
    }
    
    z_score_columns = [col for col in df.columns if col.startswith('zscore_')]

    for col in z_score_columns:
        # Find matches for Ki_Rest
        rest_matches = df[np.abs(df[col] - KI_REST) < TOLERANCE]
        if not rest_matches.empty:
            # Store the relevant columns for reporting
            ki_hits['rest'][col] = rest_matches[['ticker', 'type', col]].copy()

        # Find matches for Ki_Motion
        motion_matches = df[np.abs(df[col] - KI_MOTION) < TOLERANCE]
        if not motion_matches.empty:
            ki_hits['motion'][col] = motion_matches[['ticker', 'type', col]].copy()

    # --- Step 4: Summarize and Report the Findings ---
    print("\n--- Ki Resonance Analysis Report ---")

    print(f"\n--- Found Ki_Rest (~{KI_REST:.4f}) Resonances In: ---")
    found_rest_hit = False
    for metric, matches_df in ki_hits['rest'].items():
        if len(matches_df) >= MIN_MATCHES_TO_REPORT:
            found_rest_hit = True
            print(f"\nMetric: '{metric}' ({len(matches_df)} matches)")
            print(matches_df.rename(columns={metric: 'Z-Score'}).to_string(index=False))
    if not found_rest_hit:
        print("No significant categories found for Ki_Rest.")

    print(f"\n--- Found Ki_Motion (~{KI_MOTION:.4f}) Resonances In: ---")
    found_motion_hit = False
    for metric, matches_df in ki_hits['motion'].items():
        if len(matches_df) >= MIN_MATCHES_TO_REPORT:
            found_motion_hit = True
            print(f"\nMetric: '{metric}' ({len(matches_df)} matches)")
            print(matches_df.rename(columns={metric: 'Z-Score'}).to_string(index=False))
    if not found_motion_hit:
        print("No significant categories found for Ki_Motion.")

    # --- Step 5: Save the full, enriched dataset ---
    try:
        df.to_csv(final_report_path, index=False, float_format='%.6f')
        print(f"\nâœ… Full dataset with all Z-Scores saved to '{final_report_path}'")
    except Exception as e:
        print(f"\nError saving final report: {e}")


if __name__ == '__main__':
    # --- Configuration ---
    # The comprehensive CSV file generated by the multi-analyzer script.
    ANALYSIS_RESULTS_CSV = "stock_analysis_results.csv"
    
    # The final output file with all z-scores and identified hits.
    FINAL_REPORT_CSV = "stock_ki_final_report.csv"

    find_ki_in_results(ANALYSIS_RESULTS_CSV, FINAL_REPORT_CSV)
